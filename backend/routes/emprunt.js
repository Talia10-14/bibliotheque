console.log('Route /api/emprunts charg√©e');

const express = require('express');
const router = express.Router(); 
const Utilisateur = require('../models/utilisateur');
const Livre = require('../models/livre');
const Emprunt = require('../models/emprunt');
const { verifyToken } = require('../middleware/auth');

router.post('/',verifyToken, async (req, res) => {
    try {
      const { livre } = req.body;
  
      const dateEmprunt = new Date();
      const dateRetourPrevue = new Date(dateEmprunt);
      dateRetourPrevue.setDate(dateRetourPrevue.getDate() + 7); 
  
      const nouvelEmprunt = new Emprunt({
        user: req.user.id,
        livre,
        dateEmprunt,
        dateRetourPrevue
      });
  
      await nouvelEmprunt.save();
      res.status(201).json({
        message: 'Livre emprunt√© avec succ√®s',
        emprunt: nouvelEmprunt
      });
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  });
  router.get('/', verifyToken, async (req, res) => {
    try {
      const role = req.user.role;
  
      let emprunts;
  
      if (role === 'admin' || role === 'biblio') {
        emprunts = await Emprunt.find()
          .populate('livre')
          .populate('user', 'nom email role')
          .sort({ dateEmprunt: -1 });
      } else {
        emprunts = await Emprunt.find({ user: req.user.id })
          .populate('livre')
          .sort({ dateEmprunt: -1 });
      }
  
      res.json(emprunts);
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  });
  
  router.post('/:id/rendu', verifyToken, async (req, res) => {
    try {
      const emprunt = await Emprunt.findById(req.params.id);
      if (!emprunt) return res.status(404).json({ message: 'Emprunt non trouv√©' });
  
      emprunt.rendu = true;
      await emprunt.save();
  
      res.json({ message: 'üìó Livre marqu√© comme rendu.' });
    } catch (err) {
      res.status(500).json({ message: 'Erreur serveur', erreur: err.message });
    }
  });
  
// POST /api/emprunts/:id/reclamer
router.post('/:id/reclamer', async (req, res) => {
  console.log('Route reclamer appel√©e');

  try {
    console.log('Requ√™te de r√©clamation re√ßue pour emprunt id:', req.params.id);
    const emprunt = await Emprunt.findById(req.params.id).populate(['user', 'livre']);

    console.log('Emprunt complet:', JSON.stringify(emprunt, null, 2));

    if (!emprunt) {
      console.log('Emprunt non trouv√©');

      return res.status(404).json({ message: 'Emprunt non trouv√©' });
    }
    if (!emprunt.user || !emprunt.livre) {
      console.log('Utilisateur ou livre li√© manquant');
      return res.status(404).json({ message: 'Utilisateur ou livre li√© √† cet emprunt non trouv√©' });
    }
    if (!emprunt.dateRetourPrevue) {
      console.log('Date de retour pr√©vue manquante');

      return res.status(400).json({ message: 'Date de retour pr√©vue non d√©finie.' });
    }
    // V√©rifier si l'emprunt est en retard
    const enRetard = new Date(emprunt.dateRetourPrevue) < new Date();
    if (!enRetard) {
      console.log('Emprunt pas en retard');

      return res.status(400).json({ message: 'Ce livre n‚Äôest pas encore en retard.' });
    }
    emprunt.reclamation = true;
    await emprunt.save();
    console.log(`R√©clamation envoy√©e √† ${emprunt.user.email} pour le livre ${emprunt.livre.titre}`);

    // Simuler un envoi d‚Äôemail (console log ou autre)
    console.log(`üìß R√©clamation envoy√©e √† ${emprunt.user.email} pour le livre ${emprunt.livre.titre}`);

    res.json({ message: 'R√©clamation envoy√©e avec succ√®s !' });
  } catch (err) {
    console.error('Erreur dans /reclamer:', err.stack || err);

    res.status(500).json({ message: 'Erreur serveur' });
  }
});

  module.exports = router;
